import { Injectable } from '@nestjs/common';
import { UserService } from 'src/api/user/service/user.service';
import { EmployeeService } from 'src/api/employee/service/employee.service';
import { AuthDTO } from 'src/api/auth/entity/auth.dto';
import { isSameCrypted } from 'src/_utils/bcrypt.util';
import { AuthService } from 'src/api/auth/service/auth.service';

@Injectable()
export class LoginService {

    constructor(
        private userService: UserService,
        private employeeService: EmployeeService,
        private authService: AuthService,
    ) {}

    async loginUser(dto: AuthDTO): Promise<AuthDTO> {
        const user = await this.userService.findByLogin(dto.identification);
        if(! user) throw new Error(`Credenciales incorrectas`);
        if(user.active !== 1) throw new Error(`Usuario est√° bloqueado`);
        if(! isSameCrypted(dto.password, user.password)) throw new Error(`Credenciales incorrectas`);
        let response = new AuthDTO();
        response.uuid = user.uuid;
        response.full_name = user.name;
        response.active = user.active;
        response.rol = user.rol?.cod;
        response.company_id = user.enterprise?.id;
        response.company_name = user.enterprise?.name;
        response.bank = "";
        response.token = this.authService.generateAccessToken(user.uuid);
        return response;
    }

    async loginEmployee(dto: AuthDTO): Promise<AuthDTO> {
        const user = await this.employeeService.findByIdentification(dto.identification);
        if(! user) throw new Error(`Credenciales incorrectas`);
        if(! isSameCrypted(dto.password, user.password)) throw new Error(`Credenciales incorrectas`);
        let response = new AuthDTO();
        response.uuid = user.uuid;
        response.full_name = user.name;
        response.active = 1;
        response.rol = 'EMPL';
        response.company_id = user.range?.enterprise?.id;
        response.company_name = user.range?.enterprise?.name;
        response.bank = user.bank?.cod;
        response.token = this.authService.generateAccessToken(user.uuid);
        return response;
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */