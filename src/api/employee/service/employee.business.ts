import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Employee } from '../entity/employee.entity';
import { EmployeeService } from './employee.service';
import { EmployeeDTO } from '../entity/employee.dto';
import { cryptText } from 'src/_utils/bcrypt.util';
import { EmployeeExcelDTO } from '../entity/employee-excel.dto';
import { readExcelByBytes } from 'src/_utils/read-excel';

@Injectable()
export class EmployeeBusiness extends EmployeeService{

    constructor(
        @InjectRepository(Employee)
        protected repo: Repository<Employee>,
    ) {super(repo);}

    async findAllByEnterprise(enterprise: number){
        return this.findMany({ where: { range: { enterprise: { id: enterprise } } }, order: { name: 'ASC' } });
    }

    async findAll(){
        return this.findMany({ order: { name: 'ASC' } });
    }

    async updatePassword(id: string, dto: EmployeeDTO): Promise<Employee>{
        try{
            let entity = await this.findById(id);
            if(entity == null) throw new Error('Entity not found for edition');
            if(dto.password === '' || dto.password === undefined) throw new Error('Password empty');
            entity.password = cryptText(dto.password);
            let data = this.repo.save(entity);
            return data;
        } catch(err){
            throw new Error(err.message);
        }
    }

    async activate(uuid: string): Promise<Employee> {
        return await this.changeActive(uuid, 1);
    }

    async block(uuid: string): Promise<Employee> {
        return await this.changeActive(uuid, 0);
    }

    async changeActive(uuid: string, active: number): Promise<Employee> {
        let entity = await this.findById(uuid);
        if(entity == null) throw new Error('Entity not found for edition');
        entity.state = active;
        return await this.repo.save(entity);
    }

    async readExcelEmployees(dto: EmployeeDTO): Promise<EmployeeExcelDTO[]> {
        return readExcelByBytes<EmployeeExcelDTO>(dto.bytes);
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */