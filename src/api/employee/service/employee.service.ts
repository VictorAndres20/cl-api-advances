import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Employee } from '../entity/employee.entity';
import { EmployeeDTO } from '../entity/employee.dto';
import { Range } from 'src/api/range/entity/range.entity'
import { cryptText } from 'src/_utils/bcrypt.util';
import { Bank } from 'src/api/bank/entity/bank.entity';

@Injectable()
export class EmployeeService extends BasicCrudService<Employee, string, EmployeeDTO>{

    constructor(
        @InjectRepository(Employee)
        protected repo: Repository<Employee>,
    ) {super();}

    findById(id: string): Promise<Employee>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    findByIdentification(id: string): Promise<Employee>{
        try{
            return this.findOne({where: {id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: EmployeeDTO): Employee{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new Employee();
        entity.name = dto.name;
        entity.id = dto.id;
        entity.phone = dto.phone;
        entity.salary = dto.salary;
        entity.password = cryptText(dto.password);
        entity.state = dto.state;
        let range = new Range();
        range.uuid = dto.range;
        entity.range = range;
        let bank = new Bank();
        bank.cod = dto.bank;
        entity.bank = bank;
        return entity;
    }

    async dataValidationBeforeCreate(dto: EmployeeDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: Employee, dto: EmployeeDTO): Employee{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.name = dto.name ? dto.name : entity.name;
        entity.id = dto.id ? dto.id : entity.id;
        entity.phone = dto.phone ? dto.phone : entity.phone;
        entity.salary = dto.salary ? dto.salary : entity.salary;
        entity.state = dto.state ? dto.state : entity.state;
        let range = new Range();
        range.uuid = dto.range;
        entity.range = dto.range ? range : entity.range;
        let bank = new Bank();
        bank.cod = dto.bank;
        entity.bank = dto.bank ? bank : entity.bank;
        return entity;
    }

    async dataValidationBeforeEdit(dto: EmployeeDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */