import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { RangeAmount } from '../entity/range_amount.entity';
import { RangeAmountDTO } from '../entity/range_amount.dto';
import { Amount } from 'src/api/amount/entity/amount.entity'
import { Range } from 'src/api/range/entity/range.entity'

@Injectable()
export class RangeAmountService extends BasicCrudService<RangeAmount, string, RangeAmountDTO>{

    constructor(
        @InjectRepository(RangeAmount)
        protected repo: Repository<RangeAmount>,
    ) {super();}

    findById(id: string): Promise<RangeAmount>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: RangeAmountDTO): RangeAmount{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new RangeAmount();
        let amount = new Amount();
        amount.uuid = dto.amount;
        entity.amount = amount;
        let range = new Range();
        range.uuid = dto.range;
        entity.range = range;
        return entity;
    }

    async dataValidationBeforeCreate(dto: RangeAmountDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: RangeAmount, dto: RangeAmountDTO): RangeAmount{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        let amount = new Amount();
        amount.uuid = dto.amount;
        entity.amount = dto.amount ? amount : entity.amount;
        let range = new Range();
        range.uuid = dto.range;
        entity.range = dto.range ? range : entity.range;
        return entity;
    }

    async dataValidationBeforeEdit(dto: RangeAmountDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */