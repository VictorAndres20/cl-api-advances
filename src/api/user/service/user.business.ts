import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../entity/user.entity';
import { UserService } from './user.service';
import { UserDTO } from '../entity/user.dto';
import { cryptText } from 'src/_utils/bcrypt.util';

@Injectable()
export class UserBusiness extends UserService{

    constructor(
        @InjectRepository(User)
        protected repo: Repository<User>,
    ) {super(repo);}

    async updatePassword(id: string, dto: UserDTO): Promise<User>{
        try{
            let entity = await this.findById(id);
            if(entity == null) throw new Error('Entity not found for edition');
            if(dto.password === '' || dto.password === undefined) throw new Error('Password empty');
            entity.password = cryptText(dto.password);
            let data = this.repo.save(entity);
            return data;
        } catch(err){
            throw new Error(err.message);
        }
    }
}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */