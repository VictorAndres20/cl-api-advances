import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../entity/user.entity';
import { UserDTO } from '../entity/user.dto';
import { Enterprise } from 'src/api/enterprise/entity/enterprise.entity'
import { UserRol } from 'src/api/user_rol/entity/user_rol.entity'
import { cryptText } from 'src/_utils/bcrypt.util';

@Injectable()
export class UserService extends BasicCrudService<User, string, UserDTO>{

    constructor(
        @InjectRepository(User)
        protected repo: Repository<User>,
    ) {super();}

    findById(id: string): Promise<User>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    findByLogin(login: string): Promise<User>{
        try{
            return this.findOne({where: { login }});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: UserDTO): User{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new User();
        entity.name = dto.name;
        entity.email = dto.email;
        entity.login = dto.login;
        entity.password = cryptText(dto.password);
        entity.active = dto.active;
        let enterprise = new Enterprise();
        enterprise.id = dto.enterprise;
        entity.enterprise = enterprise;
        let user_rol = new UserRol();
        user_rol.cod = dto.rol;
        entity.rol = user_rol;
        return entity;
    }

    async dataValidationBeforeCreate(dto: UserDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: User, dto: UserDTO): User{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.name = dto.name ? dto.name : entity.name;
        entity.email = dto.email ? dto.email : entity.email;
        entity.login = dto.login ? dto.login : entity.login;
        entity.active = dto.active ? dto.active : entity.active;
        let enterprise = new Enterprise();
        enterprise.id = dto.enterprise;
        entity.enterprise = dto.enterprise ? enterprise : entity.enterprise;
        let user_rol = new UserRol();
        user_rol.cod = dto.rol;
        entity.rol = dto.rol ? user_rol : entity.rol;
        return entity;
    }

    async dataValidationBeforeEdit(dto: UserDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */