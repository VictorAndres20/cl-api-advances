import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { DataSource, Repository } from 'typeorm';
import { Range } from '../entity/range.entity';
import { RangeService } from './range.service';
import { Amount } from 'src/api/amount/entity/amount.entity';

@Injectable()
export class RangeBusiness extends RangeService{

    constructor(
        @InjectRepository(Range)
        protected repo: Repository<Range>,
        private connection: DataSource,
    ) {super(repo);}

    async findAllByEnterprise(enterprise: number){
        return this.findMany({ where: { enterprise: { id: enterprise }, active: 1 }, order: { id: 'ASC' }, relations: { amounts: true } });
    }

    async findAll(){
        return this.findMany({ where: { active: 1 }, order: { id: 'ASC' }, relations: { amounts: true } });
    }

    async activate(uuid: string): Promise<Range> {
        return await this.changeActive(uuid, 1);
    }

    async block(uuid: string): Promise<Range> {
        return await this.changeActive(uuid, 0);
    }

    async changeActive(uuid: string, active: number): Promise<Range> {
        let entity = await this.findById(uuid);
        if(entity == null) throw new Error('Entity not found for edition');
        const queryRunner = this.connection.createQueryRunner();
        await queryRunner.startTransaction();
        
        try {
            if(active === 0){
                const amounts = await queryRunner.manager.getRepository(Amount).find({ where: { range: { uuid: entity.uuid } } });
                if(amounts && amounts?.length > 0) await queryRunner.manager.remove(amounts);
                entity.money_limit = 0;
            }
            entity.active = active;
            const entityUpdated = await queryRunner.manager.save(entity);
            await queryRunner.commitTransaction();
            return entityUpdated;
        } catch (err) {
            await queryRunner.rollbackTransaction();
            throw new Error(err.message);
        } finally {
            await queryRunner.release();
        }
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */