import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Range } from '../entity/range.entity';
import { RangeDTO } from '../entity/range.dto';
import { Enterprise } from 'src/api/enterprise/entity/enterprise.entity'

@Injectable()
export class RangeService extends BasicCrudService<Range, string, RangeDTO>{

    constructor(
        @InjectRepository(Range)
        protected repo: Repository<Range>,
    ) {super();}

    findAll(): Promise<Range[]> {
        return this.findMany({ order: { id: 'ASC' } });
    }

    findById(id: string): Promise<Range>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: RangeDTO): Range{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new Range();
        entity.id = dto.id;
        let enterprise = new Enterprise();
        enterprise.id = dto.enterprise;
        entity.enterprise = enterprise;
        return entity;
    }

    async dataValidationBeforeCreate(dto: RangeDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: Range, dto: RangeDTO): Range{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.id = dto.id ? dto.id : entity.id;
        let enterprise = new Enterprise();
        enterprise.id = dto.enterprise;
        entity.enterprise = dto.enterprise ? enterprise : entity.enterprise;
        return entity;
    }

    async dataValidationBeforeEdit(dto: RangeDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */