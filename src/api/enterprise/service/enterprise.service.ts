import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { DataSource, Repository } from 'typeorm';
import { Enterprise } from '../entity/enterprise.entity';
import { EnterpriseDTO } from '../entity/enterprise.dto';
import { AdvancePeriodDTO } from 'src/api/advance_period/entity/advance_period.dto';
import { AdvancePeriod } from 'src/api/advance_period/entity/advance_period.entity';

@Injectable()
export class EnterpriseService extends BasicCrudService<Enterprise, number, EnterpriseDTO>{

    constructor(
        @InjectRepository(Enterprise)
        protected repo: Repository<Enterprise>,
        private connection: DataSource,
    ) {super();}

    findAll(): Promise<Enterprise[]> {
        return this.findMany({ order: { name: 'ASC' } });
    }

    findById(id: number): Promise<Enterprise>{
        try{
            return this.findOne({where: { id }});
        } catch(err){
            throw new Error(err.message);
        }
    }

    async resetLimitDate(dto: EnterpriseDTO): Promise<Enterprise> {
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.id) throw new Error('Entity id null');
        if(! dto.date_limit) throw new Error('Date limit null');

        const entity = await this.findById(dto.id);

        if(!entity) throw new Error('Entity not found');

        entity.date_limit = dto.date_limit;
        return await this.repo.save(entity);
    }

    buildBaseCreation(dto: EnterpriseDTO): Enterprise{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new Enterprise();
        entity.nit = dto.nit;
        entity.name = dto.name;
        entity.address = dto.address;
        entity.date_limit = dto.date_limit;
        return entity;
    }

    async dataValidationBeforeCreate(dto: EnterpriseDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: Enterprise, dto: EnterpriseDTO): Enterprise{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.id) throw new Error('Entity id null');

        //Assign data
        entity.nit = dto.nit ? dto.nit : entity.nit;
        entity.name = dto.name ? dto.name : entity.name;
        entity.address = dto.address ? dto.address : entity.address;
        return entity;
    }

    async dataValidationBeforeEdit(dto: EnterpriseDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    async createOne(dto: EnterpriseDTO): Promise<Enterprise> {
        const queryRunner = this.connection.createQueryRunner();
        await queryRunner.startTransaction();
        try {
            await this.dataValidationBeforeCreate(dto);
            const enterprise = await queryRunner.manager.save(this.buildBaseCreation(dto));
            const period = new AdvancePeriod();
            period.name = 'Periodo inicial';
            period.created_date = new Date();
            period.enterprise_id = enterprise.id;
            await queryRunner.manager.save(period);
            await queryRunner.commitTransaction();
            return enterprise;
        } catch (err) {
            await queryRunner.rollbackTransaction();
            throw new Error(err.message);
        } finally {
            await queryRunner.release();
        }
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */