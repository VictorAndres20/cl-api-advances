import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Advance } from '../entity/advance.entity';
import { AdvanceService } from './advance.service';
import { AdvanceState } from 'src/api/advance_state/entity/advance_state.entity';
import { EmployeeService } from 'src/api/employee/service/employee.service';

@Injectable()
export class AdvanceBusiness extends AdvanceService{

    constructor(
        @InjectRepository(Advance)
        protected repo: Repository<Advance>,
        protected employeeService: EmployeeService,
    ) {super(repo, employeeService);}

    async findAllByEmployeePaged(page: number = 0, limit: number = 4, employee: string): Promise<[Advance[], number]> {
        return await this.repo.findAndCount({ 
            where: { employee: { uuid: employee } }, 
            order: { created_date: 'DESC' }, 
            skip: page * limit, take: limit
        });
    }

    async findAllByEnterprise(enterprise: number): Promise<Advance[]> {
        return await this.findMany({ 
            where: { employee: { range: { enterprise: { id: enterprise } } } }, 
            order: { created_date: 'DESC' }, 
            relations: { employee: { range: true } }
        });
    }

    async findAllByEnterprisePending(enterprise: number): Promise<Advance[]> {
        return await this.findMany({ 
            where: { state: { cod: 'PEND' }, employee: { range: { enterprise: { id: enterprise } } } }, 
            order: { created_date: 'DESC' }, 
            relations: { employee: { range: true } }
        });
    }

    async approve(uuid: string): Promise<Advance> {
        return await this.changeState(uuid, 'APPR');
    }

    async decline(uuid: string): Promise<Advance> {
        return await this.changeState(uuid, 'DECL');
    }

    async changeState(uuid: string, stateCod: string): Promise<Advance> {
        let entity = await this.findById(uuid);
        if(entity == null) throw new Error('Entity not found for edition');
        if(stateCod === 'APPR') entity.approved_date = new Date();
        if(stateCod === 'DECL') entity.declined_date = new Date();
        let state = new AdvanceState();
        state.cod = stateCod;
        entity.state = state;
        return await this.repo.save(entity);
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */