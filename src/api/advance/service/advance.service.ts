import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Advance } from '../entity/advance.entity';
import { AdvanceDTO } from '../entity/advance.dto';
import { Employee } from 'src/api/employee/entity/employee.entity'
import { AdvanceState } from 'src/api/advance_state/entity/advance_state.entity'

@Injectable()
export class AdvanceService extends BasicCrudService<Advance, string, AdvanceDTO>{

    constructor(
        @InjectRepository(Advance)
        protected repo: Repository<Advance>,
    ) {super();}

    findById(id: string): Promise<Advance>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: AdvanceDTO): Advance{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new Advance();
        entity.created_date = dto.created_date;
        entity.approved_date = dto.approved_date;
        entity.declined_date = dto.declined_date;
        entity.value = dto.value;
        entity.cost = dto.cost;
        let employee = new Employee();
        employee.uuid = dto.employee;
        entity.employee = employee;
        let advance_state = new AdvanceState();
        advance_state.cod = dto.state;
        entity.state = advance_state;
        return entity;
    }

    async dataValidationBeforeCreate(dto: AdvanceDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: Advance, dto: AdvanceDTO): Advance{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.created_date = dto.created_date ? dto.created_date : entity.created_date;
        entity.approved_date = dto.approved_date ? dto.approved_date : entity.approved_date;
        entity.declined_date = dto.declined_date ? dto.declined_date : entity.declined_date;
        entity.value = dto.value ? dto.value : entity.value;
        entity.cost = dto.cost ? dto.cost : entity.cost;
        let employee = new Employee();
        employee.uuid = dto.employee;
        entity.employee = dto.employee ? employee : entity.employee;
        let advance_state = new AdvanceState();
        advance_state.cod = dto.state;
        entity.state = dto.state ? advance_state : entity.state;
        return entity;
    }

    async dataValidationBeforeEdit(dto: AdvanceDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */