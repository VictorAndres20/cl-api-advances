import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { BankSupported } from '../entity/bank_supported.entity';
import { BankSupportedDTO } from '../entity/bank_supported.dto';
import { Bank } from 'src/api/bank/entity/bank.entity'

@Injectable()
export class BankSupportedService extends BasicCrudService<BankSupported, string, BankSupportedDTO>{

    constructor(
        @InjectRepository(BankSupported)
        protected repo: Repository<BankSupported>,
    ) {super();}

    findById(id: string): Promise<BankSupported>{
        try{
            return this.findOne({where: {cod:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: BankSupportedDTO): BankSupported{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new BankSupported();
        let bank = new Bank();
        bank.cod = dto.bank;
        entity.bank = bank;
        return entity;
    }

    async dataValidationBeforeCreate(dto: BankSupportedDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: BankSupported, dto: BankSupportedDTO): BankSupported{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.cod) throw new Error('Entity id null');

        //Assign data
        let bank = new Bank();
        bank.cod = dto.bank;
        entity.bank = dto.bank ? bank : entity.bank;
        return entity;
    }

    async dataValidationBeforeEdit(dto: BankSupportedDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */